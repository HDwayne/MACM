$date
  Thu Mar 21 14:24:59 2024
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module numeric_std $end
$upscope $end
$scope module textio $end
$upscope $end
$scope module test_etagefe $end
$var reg 32 ! npc[31:0] $end
$var reg 32 " npc_fw_br[31:0] $end
$var reg 1 # pcsrc_er $end
$var reg 1 $ bpris_ex $end
$var reg 1 % gel_li $end
$var reg 1 & clk $end
$var reg 32 ' pc_plus_4[31:0] $end
$var reg 32 ( i_fe[31:0] $end
$scope module etagefe_inst $end
$var reg 32 ) npc[31:0] $end
$var reg 32 * npc_fw_br[31:0] $end
$var reg 1 + pcsrc_er $end
$var reg 1 , bpris_ex $end
$var reg 1 - gel_li $end
$var reg 1 . clk $end
$var reg 32 / pc_plus_4[31:0] $end
$var reg 32 0 i_fe[31:0] $end
$var reg 32 1 pc_inter[31:0] $end
$var reg 32 2 pc_reg_in[31:0] $end
$var reg 32 3 pc_reg_out[31:0] $end
$var reg 32 4 sig_pc_plus_4[31:0] $end
$var reg 32 5 sig_4[31:0] $end
$scope module reg $end
$var reg 32 6 source[31:0] $end
$var reg 32 7 output[31:0] $end
$var reg 1 8 wr $end
$var reg 1 9 raz $end
$var reg 1 : clk $end
$var reg 32 ; sig[31:0] $end
$upscope $end
$scope module add $end
$var reg 32 < a[31:0] $end
$var reg 32 = b[31:0] $end
$var reg 1 > cin $end
$var reg 32 ? s[31:0] $end
$var reg 1 @ c30 $end
$var reg 1 A c31 $end
$var reg 33 B carry[32:0] $end
$scope module for1(0) $end
$scope module addi $end
$var reg 1 C a $end
$var reg 1 D b $end
$var reg 1 E cin $end
$var reg 1 F s $end
$var reg 1 G cout $end
$upscope $end
$upscope $end
$scope module for1(1) $end
$scope module addi $end
$var reg 1 H a $end
$var reg 1 I b $end
$var reg 1 J cin $end
$var reg 1 K s $end
$var reg 1 L cout $end
$upscope $end
$upscope $end
$scope module for1(2) $end
$scope module addi $end
$var reg 1 M a $end
$var reg 1 N b $end
$var reg 1 O cin $end
$var reg 1 P s $end
$var reg 1 Q cout $end
$upscope $end
$upscope $end
$scope module for1(3) $end
$scope module addi $end
$var reg 1 R a $end
$var reg 1 S b $end
$var reg 1 T cin $end
$var reg 1 U s $end
$var reg 1 V cout $end
$upscope $end
$upscope $end
$scope module for1(4) $end
$scope module addi $end
$var reg 1 W a $end
$var reg 1 X b $end
$var reg 1 Y cin $end
$var reg 1 Z s $end
$var reg 1 [ cout $end
$upscope $end
$upscope $end
$scope module for1(5) $end
$scope module addi $end
$var reg 1 \ a $end
$var reg 1 ] b $end
$var reg 1 ^ cin $end
$var reg 1 _ s $end
$var reg 1 ` cout $end
$upscope $end
$upscope $end
$scope module for1(6) $end
$scope module addi $end
$var reg 1 a a $end
$var reg 1 b b $end
$var reg 1 c cin $end
$var reg 1 d s $end
$var reg 1 e cout $end
$upscope $end
$upscope $end
$scope module for1(7) $end
$scope module addi $end
$var reg 1 f a $end
$var reg 1 g b $end
$var reg 1 h cin $end
$var reg 1 i s $end
$var reg 1 j cout $end
$upscope $end
$upscope $end
$scope module for1(8) $end
$scope module addi $end
$var reg 1 k a $end
$var reg 1 l b $end
$var reg 1 m cin $end
$var reg 1 n s $end
$var reg 1 o cout $end
$upscope $end
$upscope $end
$scope module for1(9) $end
$scope module addi $end
$var reg 1 p a $end
$var reg 1 q b $end
$var reg 1 r cin $end
$var reg 1 s s $end
$var reg 1 t cout $end
$upscope $end
$upscope $end
$scope module for1(10) $end
$scope module addi $end
$var reg 1 u a $end
$var reg 1 v b $end
$var reg 1 w cin $end
$var reg 1 x s $end
$var reg 1 y cout $end
$upscope $end
$upscope $end
$scope module for1(11) $end
$scope module addi $end
$var reg 1 z a $end
$var reg 1 { b $end
$var reg 1 | cin $end
$var reg 1 } s $end
$var reg 1 !" cout $end
$upscope $end
$upscope $end
$scope module for1(12) $end
$scope module addi $end
$var reg 1 "" a $end
$var reg 1 #" b $end
$var reg 1 $" cin $end
$var reg 1 %" s $end
$var reg 1 &" cout $end
$upscope $end
$upscope $end
$scope module for1(13) $end
$scope module addi $end
$var reg 1 '" a $end
$var reg 1 (" b $end
$var reg 1 )" cin $end
$var reg 1 *" s $end
$var reg 1 +" cout $end
$upscope $end
$upscope $end
$scope module for1(14) $end
$scope module addi $end
$var reg 1 ," a $end
$var reg 1 -" b $end
$var reg 1 ." cin $end
$var reg 1 /" s $end
$var reg 1 0" cout $end
$upscope $end
$upscope $end
$scope module for1(15) $end
$scope module addi $end
$var reg 1 1" a $end
$var reg 1 2" b $end
$var reg 1 3" cin $end
$var reg 1 4" s $end
$var reg 1 5" cout $end
$upscope $end
$upscope $end
$scope module for1(16) $end
$scope module addi $end
$var reg 1 6" a $end
$var reg 1 7" b $end
$var reg 1 8" cin $end
$var reg 1 9" s $end
$var reg 1 :" cout $end
$upscope $end
$upscope $end
$scope module for1(17) $end
$scope module addi $end
$var reg 1 ;" a $end
$var reg 1 <" b $end
$var reg 1 =" cin $end
$var reg 1 >" s $end
$var reg 1 ?" cout $end
$upscope $end
$upscope $end
$scope module for1(18) $end
$scope module addi $end
$var reg 1 @" a $end
$var reg 1 A" b $end
$var reg 1 B" cin $end
$var reg 1 C" s $end
$var reg 1 D" cout $end
$upscope $end
$upscope $end
$scope module for1(19) $end
$scope module addi $end
$var reg 1 E" a $end
$var reg 1 F" b $end
$var reg 1 G" cin $end
$var reg 1 H" s $end
$var reg 1 I" cout $end
$upscope $end
$upscope $end
$scope module for1(20) $end
$scope module addi $end
$var reg 1 J" a $end
$var reg 1 K" b $end
$var reg 1 L" cin $end
$var reg 1 M" s $end
$var reg 1 N" cout $end
$upscope $end
$upscope $end
$scope module for1(21) $end
$scope module addi $end
$var reg 1 O" a $end
$var reg 1 P" b $end
$var reg 1 Q" cin $end
$var reg 1 R" s $end
$var reg 1 S" cout $end
$upscope $end
$upscope $end
$scope module for1(22) $end
$scope module addi $end
$var reg 1 T" a $end
$var reg 1 U" b $end
$var reg 1 V" cin $end
$var reg 1 W" s $end
$var reg 1 X" cout $end
$upscope $end
$upscope $end
$scope module for1(23) $end
$scope module addi $end
$var reg 1 Y" a $end
$var reg 1 Z" b $end
$var reg 1 [" cin $end
$var reg 1 \" s $end
$var reg 1 ]" cout $end
$upscope $end
$upscope $end
$scope module for1(24) $end
$scope module addi $end
$var reg 1 ^" a $end
$var reg 1 _" b $end
$var reg 1 `" cin $end
$var reg 1 a" s $end
$var reg 1 b" cout $end
$upscope $end
$upscope $end
$scope module for1(25) $end
$scope module addi $end
$var reg 1 c" a $end
$var reg 1 d" b $end
$var reg 1 e" cin $end
$var reg 1 f" s $end
$var reg 1 g" cout $end
$upscope $end
$upscope $end
$scope module for1(26) $end
$scope module addi $end
$var reg 1 h" a $end
$var reg 1 i" b $end
$var reg 1 j" cin $end
$var reg 1 k" s $end
$var reg 1 l" cout $end
$upscope $end
$upscope $end
$scope module for1(27) $end
$scope module addi $end
$var reg 1 m" a $end
$var reg 1 n" b $end
$var reg 1 o" cin $end
$var reg 1 p" s $end
$var reg 1 q" cout $end
$upscope $end
$upscope $end
$scope module for1(28) $end
$scope module addi $end
$var reg 1 r" a $end
$var reg 1 s" b $end
$var reg 1 t" cin $end
$var reg 1 u" s $end
$var reg 1 v" cout $end
$upscope $end
$upscope $end
$scope module for1(29) $end
$scope module addi $end
$var reg 1 w" a $end
$var reg 1 x" b $end
$var reg 1 y" cin $end
$var reg 1 z" s $end
$var reg 1 {" cout $end
$upscope $end
$upscope $end
$scope module for1(30) $end
$scope module addi $end
$var reg 1 |" a $end
$var reg 1 }" b $end
$var reg 1 !# cin $end
$var reg 1 "# s $end
$var reg 1 ## cout $end
$upscope $end
$upscope $end
$scope module for1(31) $end
$scope module addi $end
$var reg 1 $# a $end
$var reg 1 %# b $end
$var reg 1 &# cin $end
$var reg 1 '# s $end
$var reg 1 (# cout $end
$upscope $end
$upscope $end
$upscope $end
$scope module mem_instr $end
$var reg 32 )# addr[31:0] $end
$var reg 32 *# instr[31:0] $end
$scope module mem $end
$var reg 32 +# a[31:0] $end
$var reg 32 ,# rd[31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b00000000000000000000000000000000 !
b11111111111111111111111111111111 "
U#
U$
1%
U&
b00000000000000000000000000000100 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b11111111111111111111111111111111 *
U+
U,
1-
U.
b00000000000000000000000000000100 /
b00000000000000000000000000000000 0
b00000000000000000000000000000100 1
b11111111111111111111111111111111 2
b00000000000000000000000000000000 3
b00000000000000000000000000000100 4
b00000000000000000000000000000100 5
b11111111111111111111111111111111 6
b00000000000000000000000000000000 7
18
19
U:
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000100 =
0>
b00000000000000000000000000000100 ?
0@
0A
b000000000000000000000000000000000 B
0C
0D
0E
0F
0G
0H
0I
0J
0K
0L
0M
1N
0O
1P
0Q
0R
0S
0T
0U
0V
0W
0X
0Y
0Z
0[
0\
0]
0^
0_
0`
0a
0b
0c
0d
0e
0f
0g
0h
0i
0j
0k
0l
0m
0n
0o
0p
0q
0r
0s
0t
0u
0v
0w
0x
0y
0z
0{
0|
0}
0!"
0""
0#"
0$"
0%"
0&"
0'"
0("
0)"
0*"
0+"
0,"
0-"
0."
0/"
00"
01"
02"
03"
04"
05"
06"
07"
08"
09"
0:"
0;"
0<"
0="
0>"
0?"
0@"
0A"
0B"
0C"
0D"
0E"
0F"
0G"
0H"
0I"
0J"
0K"
0L"
0M"
0N"
0O"
0P"
0Q"
0R"
0S"
0T"
0U"
0V"
0W"
0X"
0Y"
0Z"
0["
0\"
0]"
0^"
0_"
0`"
0a"
0b"
0c"
0d"
0e"
0f"
0g"
0h"
0i"
0j"
0k"
0l"
0m"
0n"
0o"
0p"
0q"
0r"
0s"
0t"
0u"
0v"
0w"
0x"
0y"
0z"
0{"
0|"
0}"
0!#
0"#
0##
0$#
0%#
0&#
0'#
0(#
b00000000000000000000000000000000 )#
b00000000000000000000000000000000 *#
b00000000000000000000000000000000 +#
b00000000000000000000000000000000 ,#
#10000000
1#
0$
0&
1+
0,
0.
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 6
0:
#20000000
1&
1.
1:
#30000000
0#
0&
0+
0.
b00000000000000000000000000000100 1
b00000000000000000000000000000100 2
b00000000000000000000000000000100 6
0:
#40000000
1&
b00000000000000000000000000001000 '
b00000000000000000000000000000001 (
1.
b00000000000000000000000000001000 /
b00000000000000000000000000000001 0
b00000000000000000000000000001000 1
b00000000000000000000000000001000 2
b00000000000000000000000000000100 3
b00000000000000000000000000001000 4
b00000000000000000000000000001000 6
b00000000000000000000000000000100 7
1:
b00000000000000000000000000000100 ;
b00000000000000000000000000000100 <
b00000000000000000000000000001000 ?
b000000000000000000000000000001000 B
1M
0P
1Q
1T
1U
b00000000000000000000000000000100 )#
b00000000000000000000000000000001 *#
b00000000000000000000000000000100 +#
b00000000000000000000000000000001 ,#
#50000000
0&
0.
0:
#60000000
1&
b00000000000000000000000000001100 '
b00000000000000000000000000000010 (
1.
b00000000000000000000000000001100 /
b00000000000000000000000000000010 0
b00000000000000000000000000001100 1
b00000000000000000000000000001100 2
b00000000000000000000000000001000 3
b00000000000000000000000000001100 4
b00000000000000000000000000001100 6
b00000000000000000000000000001000 7
1:
b00000000000000000000000000001000 ;
b00000000000000000000000000001000 <
b00000000000000000000000000001100 ?
b000000000000000000000000000000000 B
0M
1P
0Q
1R
0T
1U
0V
0Y
0Z
b00000000000000000000000000001000 )#
b00000000000000000000000000000010 *#
b00000000000000000000000000001000 +#
b00000000000000000000000000000010 ,#
#70000000
0&
0.
0:
#80000000
1&
b00000000000000000000000000010000 '
b00000000000000000000000000000011 (
1.
b00000000000000000000000000010000 /
b00000000000000000000000000000011 0
b00000000000000000000000000010000 1
b00000000000000000000000000010000 2
b00000000000000000000000000001100 3
b00000000000000000000000000010000 4
b00000000000000000000000000010000 6
b00000000000000000000000000001100 7
1:
b00000000000000000000000000001100 ;
b00000000000000000000000000001100 <
b00000000000000000000000000010000 ?
b000000000000000000000000000011000 B
1M
0P
1Q
1T
0U
1V
1Y
1Z
b00000000000000000000000000001100 )#
b00000000000000000000000000000011 *#
b00000000000000000000000000001100 +#
b00000000000000000000000000000011 ,#
#90000000
0&
0.
0:
#340000000
