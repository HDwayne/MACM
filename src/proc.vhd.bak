-------------------------------------------------------

-- Chemin de donnÃ©es

LIBRARY IEEE;

USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.NUMERIC_STD.ALL;

entity dataPath is
  port(
    clk, init, ALUSrc_EX, MemWr_Mem, MemWr_RE, PCSrc_ER, Bpris_EX, Gel_LI, Gel_DI, RAZ_DI, RegWR, Clr_EX, MemToReg_RE : in std_logic;
    RegSrc, EA_EX, EB_EX, immSrc, ALUCtrl_EX : in std_logic_vector(1 downto 0);
    instr_DE: out std_logic_vector(31 downto 0);
    a1, a2, rs1, rs2, CC, op3_EX_out, op3_ME_out, op3_RE_out: out std_logic_vector(3 downto 0)
);      
end entity;

architecture dataPath_arch of dataPath is
  signal Res_RE, npc_fwd_br, pc_plus_4, i_FE, i_DE, Op1_DE, Op2_DE, Op1_EX, Op2_EX, extImm_DE, extImm_EX, Res_EX, Res_ME, WD_EX, WD_ME, Res_Mem_ME, Res_Mem_RE, Res_ALU_ME, Res_ALU_RE, Res_fwd_ME : std_logic_vector(31 downto 0);
  signal Op3_DE, Op3_EX, a1_DE, a1_EX, a2_DE, a2_EX, Op3_EX_out_t, Op3_ME, Op3_ME_out_t, Op3_RE, Op3_RE_out_t : std_logic_vector(3 downto 0);
begin

  -- FE

  FE: entity work.etageFE
    port map(
      npc => Res_RE,
      npc_fw_br => npc_fwd_br,
      PCSrc_ER => PCSrc_ER,
      Bpris_EX => Bpris_EX,
      Gel_LI => Gel_LI,
      clk => clk,
      pc_plus_4 => pc_plus_4,
      i_FE => i_FE
  );

  Reg32_1: entity work.Reg32
    port map(
      source => i_FE,
      output => i_DE,
      wr => Gel_DI,
      raz => RAZ_DI,
      clk => clk
  );

  -- DE

  DE: entity work.etageDE
    port map(
      i_DE => i_DE,
      WD_ER => Res_RE,
      pc_plus_4 => pc_plus_4,
      Op3_ER => Op3_RE_out_t,
      RegSrc => RegSrc,
      immSrc => immSrc,
      RegWr => RegWR,
      clk => clk,
      init => init,
      Reg1 => a1_DE,
      Reg2 => a2_DE,
      Op3_DE => Op3_DE,
      Op1 => Op1_DE,
      Op2 => Op2_DE,
      extImm => extImm_DE
  );

  Reg32_21 : entity work.Reg4
    port map(
      source => a1_DE,
      output => a1_EX,
      wr => '1',
      raz => Clr_EX,
      clk => clk
  );

  Reg32_22 : entity work.Reg4
    port map(
      source => a2_DE,
      output => a2_EX,
      wr => '1',
      raz => Clr_EX,
      clk => clk
  );

  Reg32_23 : entity work.Reg32
    port map(
      source => Op1_DE,
      output => Op1_EX,
      wr => '1',
      raz => Clr_EX,
      clk => clk
  );

  Reg32_24 : entity work.Reg32
    port map(
      source => Op2_DE,
      output => Op2_EX,
      wr => '1',
      raz => Clr_EX,
      clk => clk
  );

  Reg32_25 : entity work.Reg32
    port map(
      source => extImm_DE,
      output => extImm_EX,
      wr => '1',
      raz => Clr_EX,
      clk => clk
  );

  Reg32_26 : entity work.Reg4
    port map(
      source => Op3_DE,
      output => Op3_EX,
      wr => '1',
      raz => Clr_EX,
      clk => clk
  );

  -- EX
 
  EX: entity work.etageEX
    port map(
      Op1_EX => Op1_EX,
      Op2_EX => Op2_EX,
      ExtImm_EX => extImm_EX,
      Res_fwd_ME => Res_fwd_ME,
      Res_fwd_ER => Res_RE,
      Op3_EX => Op3_EX,
      EA_EX => EA_EX,
      EB_EX => EB_EX,
      ALUCtrl_EX => ALUCtrl_EX,
      ALUSrc_EX => ALUSrc_EX,
      CC => CC,
      Op3_EX_out => Op3_EX_out_t,
      WD_EX => WD_EX,
      Res_EX => Res_EX,
      npc_fw_br => npc_fwd_br
  );

  Reg32_31 : entity work.Reg32
    port map(
      source => Res_EX,
      output => Res_ME,
      wr => '1',
      raz => '1',
      clk => clk
  );

  Reg32_32 : entity work.Reg32
    port map(
      source => WD_EX,
      output => WD_ME,
      wr => '1',
      raz => '1',
      clk => clk
  );

  Reg32_33 : entity work.Reg4
    port map(
      source => Op3_EX_out_t,
      output => Op3_ME,
      wr => '1',
      raz => '1',
      clk => clk
  );

  -- ME

  ME: entity work.etageME
    port map(
      Res_ME => Res_ME,
      WD_ME => WD_ME,
      Op3_ME => Op3_ME,
      clk => clk,
      MemWr_Mem => MemWr_Mem,
      Res_ALU_ME => Res_ALU_ME,
      Res_Mem_ME => Res_Mem_ME,
      Op3_ME_out => Op3_ME_out_t,
      Res_fwd_ME => Res_fwd_ME
  );

  Reg32_41 : entity work.Reg32
    port map(
      source => Res_Mem_ME,
      output => Res_Mem_RE,
      wr => MemWr_RE, --'1',
      raz => '1',
      clk => clk
  );

  Reg32_42 : entity work.Reg32
    port map(
      source => Res_ALU_ME,
      output => Res_ALU_RE,
      wr => MemWr_RE, --'1',
      raz => '1',
      clk => clk
  );

  Reg32_43 : entity work.Reg4
    port map(
      source => Op3_ME_out_t,
      output => Op3_RE,
      wr => MemWr_RE, --'1',
      raz => '1',
      clk => clk
  );

  -- RE

  RE: entity work.etageRE
    port map(
      Res_Mem_RE => Res_Mem_RE,
      Res_ALU_RE => Res_ALU_RE,
      Op3_RE => Op3_RE,
      MemToReg_RE => MemToReg_RE,
      Res_RE => Res_RE,
      Op3_RE_out => Op3_RE_out_t
  );

  -- Signaux

  instr_DE <= i_DE;
  a1 <= a1_DE;
  a2 <= a2_DE;
  rs1 <= Op3_DE;
  rs2 <= Op3_DE;
  CC <= Op3_DE;
  op3_EX_out <= Op3_EX_out_t;
  op3_ME_out <= Op3_ME_out_t;
  op3_RE_out <= Op3_RE_out_t;
  
end architecture;
